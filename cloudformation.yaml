AWSTemplateFormatVersion: 2010-09-09
Resources:
# -------------------------------------------------------------------------------------
# Roles and Permissions
  AssumePowerUser:
    Type: AWS::IAM::ManagedPolicy
    Description: "Acesso limitado"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource: "arn:aws:iam::*:role/PowerUser"
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

# -------------------------------------------------------------------------------------
# Groups and permissions

# Grupo Operations
  PowerUsers:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Operations
      ManagedPolicyArns: 
        - !Ref AssumePowerUser

# -------------------------------------------------------------------------------------
# AWS Cloud Trail

#Create bucket s3
  CloudTrailLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join ['', ['cloudtrail-', !Ref 'AWS::AccountId']]
      AccessControl: LogDeliveryWrite
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
      VersioningConfiguration:
        Status: Enabled

#Bucket Policy
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CloudTrailLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service: cloudtrail.amazonaws.com
            
            Effect: Allow
            Action:
              - "s3:GetBucketAcl"
            Resource: !Join ['', ['arn:aws:s3:::', !Ref CloudTrailLogs]]
          -
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - "s3:PutObject"
            Resource: !Join ['', ['arn:aws:s3:::', !Ref CloudTrailLogs, '/AWSLogs/', !Ref 'AWS::AccountId', '/*']]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

#CloudTrail
#  CloudTrail:
#    Type: AWS::CloudTrail::Trail
#    Properties:
#      EnableLogFileValidation: true
#      IncludeGlobalServiceEvents: true
#      IsLogging: true
#      IsMultiRegionTrail: true
#      S3BucketName: !Ref CloudTrailLogs
#      Tags:
#        - { Key: Environment, Value: security }

# -------------------------------------------------------------------------------------
# AWS Config
# required-tags, root-account-mfa-enabled, iam-password-policy, approved-amis-by-id

  ConfigRequiredTAGS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ConfigRequiredTAGS
      Description: "required-tags"
      InputParameters:
        tag1Key: Name
      Scope:
        ComplianceResourceTypes:
        - 'AWS::EC2::Instance'
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS

  ConfigRootMFA:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ConfigRootMFA
      Description: "root-account-mfa-enabled"
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED

  ConfigIAMPass:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ConfigIAMPass
      Description: "iam-password-policy"
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY

  ConfigAMIS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ConfigAMIS
      Description: "approved-amis-by-id"
      InputParameters:
        amiIds: ami-0b418580298265d5c
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::Instance'
      Source:
        Owner: AWS
        SourceIdentifier: APPROVED_AMIS_BY_ID

# -------------------------------------------------------------------------------------
# VPC and Network

#Criar VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC

# Internet gateway
  ProdInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

# Conectar o Internet gateway com o VPC
  ProdAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref ProdInternetGateway

# Subnet Publica
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.10.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public

# Subnet Privada
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.20.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private

# Subnet MGM
  MGMSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-MGM

# ElasticIP para o NAT Gateway
  NATGatewayElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

# Criando o NatGateway
  ProdNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayElasticIp.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: !Join ['', ["NAT-", !Ref "AWS::StackName" ]]

# Route Table Privada
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - Key: Name
        Value: Private

# Criando Route privada conectando na route table privada e no natgateway 
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ProdNATGateway

# Criando Route Table Publica
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - Key: Name
        Value: Public

# Criando Route publica conectando na route table privada e no natgateway 
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ProdInternetGateway

# Associando a tabela de rotas com a subnet publica
  PublicaRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

# Associando a tabela de rotas com a subnet privada
  PrivadaRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

# -------------------------------------------------------------------------------------
# Security Groups

#Securit Group web
  WEBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServers
      GroupDescription: Sec for Web Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

#Securit Group DB
  DataBaseSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Databases
      GroupDescription: Sec for Databases
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

#Securit Group MGM
  MGMSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MGMSecGroup
      GroupDescription: Sec for MGM
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# -------------------------------------------------------------------------------------
# Instancias

  # Database 1
  DataBaseInstance1:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId: ami-0b418580298265d5c
      KeyName: YOUR_KEY
      Monitoring: true
      SecurityGroupIds:
        - !Ref DataBaseSecGroup
      SubnetId: !Ref PrivateSubnet
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}-DB

  # Database 2
  DataBaseInstance2:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId: ami-0b418580298265d5c
      KeyName: YOUR_KEY
      Monitoring: true
      SecurityGroupIds:
        - !Ref DataBaseSecGroup
      SubnetId: !Ref PrivateSubnet
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}-DB

#Instance web 1
  WEBinstance1:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId: ami-0b418580298265d5c
      KeyName: YOUR_KEY
      Monitoring: true
      SecurityGroupIds:
        - !Ref WEBSecGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}-WEB

#Instance web 2
  WEBinstance2:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId: ami-0b418580298265d5c
      KeyName: YOUR_KEY
      Monitoring: true
      SecurityGroupIds:
        - !Ref WEBSecGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}-WEB

#Instance MGM
  MGMinstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId: ami-0b418580298265d5c
      KeyName: YOUR_KEY
      Monitoring: true
      SecurityGroupIds:
        - !Ref MGMSecGroup
      SubnetId: !Ref MGMSubnet
      Tags:
        -
          Key: Name
          Value: MGM-C1
